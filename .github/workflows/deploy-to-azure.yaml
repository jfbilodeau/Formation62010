# This is an example GitHub Actions workflow for building and deploying an ASP.NET application to an Azure App Service Web App.

name: ASP.NET Build and Deploy

# Trigger the workflow on pushes to the main branch.
on:
  workflow_dispatch: 
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository.
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up .NET Core environment.
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0' # Adjust to the desired .NET version

    # Step 3: Restore NuGet packages.
    - name: Restore NuGet packages
      run: dotnet restore

    # Step 4: Build the project.
    - name: Build
      run: dotnet build --configuration Release

    # Step 5: Publish the application.
    - name: Publish
      run: dotnet publish --configuration Release --output ./publish

    # # Step 6: Deploy to Azure App Service.
    # - name: Deploy to Azure App Service
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: your-app-service-name # Replace with your Azure App Service name
    #     publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE }} # Store your publish profile as a secret in your repository

    - name: Azure login
      uses: Azure/login@v2.1.0
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Resource Manager (ARM) Template
      uses: Azure/arm-deploy@v2
      with:
        # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'tenant', 'managementgroup', 'subscription'
        scope: resourcegroup
        # Override the Subscription Id set by Azure Login.
        #subscriptionId: # optional
        # Specify the Id for the Management Group, only required for Management Group Deployments.
        #managementGroupId: # optional
        # Provide the target region, only required for tenant, management Group or Subscription deployments.
        #region: # optional
        # Provide the name of a resource group, only required for resource Group deployments.
        resourceGroupName: Demo62010-Prod
        # Specify the path or URL to the Azure Resource Manager template.
        template: ./deploy/prod/template.bicep
        # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
        deploymentMode: incremental
        # Specifies the name of the resource group deployment to create.
        deploymentName: WebApp Demo Deploy
        # Supply deployment parameter values.
        parameters: ./deploy/prod/parameters-jf-prod.json
        # Specify whether to fail the action if some data is written to stderr stream of az cli. Valid values are: true, false
        #failOnStdErr: # optional, default is true
        # Specify any additional arguments for the deployment.
        # additionalArguments: # optional
              
        
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v3.0.1
      with:
        # Name of the Azure Web App
        app-name: ${{ env.WEB_APP_NAME }}
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        publish-profile: ${{ secrets.WEB_APP_PUBLISH_PROFILE }}
        # Enter an existing Slot other than the Production slot
        #slot-name: # optional, default is production
        # Applies to Web App only: Path to package or folder. *.zip, *.war, *.jar or a folder to deploy
        #package: # optional, default is .
        package: ./publish
        # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
        #images: # optional
        # Applies to Web App Containers only: Path of the Docker-Compose file. Should be a fully qualified path or relative to the default working directory. Required for multi-container scenario
        #configuration-file: # optional
        # Enter the start up command. For ex. dotnet run or dotnet run
        #startup-command: # optional
        # Enter the resource group name of the web app
        #resource-group-name: # optional
        # Enter deployment type (JAR, WAR, EAR, ZIP, Static)
        # type: # optional
        # Target path in the web app. For ex. '/home/site/wwwroot'
        #target-path: # optional
        # Delete existing files target directory before deploying
        clean: true
        # Restart the app service after deployment
        restart: true
              
      
